import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:porrot_2025/data/repositories/contestant_repository_impl.dart';
import 'package:porrot_2025/domain/usecases/create_contestant_usecase.dart';
import 'package:porrot_2025/domain/usecases/update_contestant_status_usecase.dart';
import '../../../domain/entities/contestant.dart';

class ContestantManager extends StatefulWidget {
  const ContestantManager({super.key});

  @override
  State<ContestantManager> createState() => _ContestantManagerState();
}

class _ContestantManagerState extends State<ContestantManager> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _photoUrlController = TextEditingController();
  ContestantStatus _selectedStatus = ContestantStatus.active;
  List<Contestant> _contestants = [];
  bool _isLoading = true;

  late final CreateContestantUseCase _createContestantUseCase;
  late final UpdateContestantStatusUseCase _updateContestantStatusUseCase;
  late final ContestantRepositoryImpl _contestantRepository;

  @override
  void initState() {
    super.initState();
    // In a real app, use dependency injection
    _contestantRepository = ContestantRepositoryImpl(
      FirebaseFirestore.instance,
    );
    _createContestantUseCase = CreateContestantUseCase(_contestantRepository);
    _updateContestantStatusUseCase = UpdateContestantStatusUseCase(
      _contestantRepository,
    );
    _loadContestants();
  }

  Future<void> _loadContestants() async {
    try {
      final contestants = await _contestantRepository.getAllContestants();
      setState(() {
        _contestants = contestants;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      if (mounted) {
        // Fix context issue
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to load contestants: $e')),
        );
      }
    }
  }

  void _saveContestant() async {
    if (_formKey.currentState!.validate()) {
      final scaffoldMessenger = ScaffoldMessenger.of(context);
      final contestant = Contestant(
        // contestantId is null - will be auto-generated by the data layer
        name: _nameController.text,
        photoUrl: _photoUrlController.text.isNotEmpty
            ? _photoUrlController.text
            : null,
        status: _selectedStatus,
      );

      try {
        await _createContestantUseCase.execute(contestant);
        scaffoldMessenger.showSnackBar(
          const SnackBar(content: Text('Contestant saved successfully!')),
        );
        _formKey.currentState!.reset();
        _nameController.clear();
        _photoUrlController.clear();
        setState(() {
          _selectedStatus = ContestantStatus.active;
        });
        // Refresh the list of contestants
        _loadContestants();
      } catch (e) {
        scaffoldMessenger.showSnackBar(
          SnackBar(content: Text('Failed to save contestant: $e')),
        );
      }
    }
  }

  Future<void> _updateContestantStatus(
    String contestantId,
    bool isActive,
  ) async {
    final newStatus = isActive
        ? ContestantStatus.active
        : ContestantStatus.eliminated;
    try {
      await _updateContestantStatusUseCase.execute(contestantId, newStatus);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Contestant status updated successfully!')),
        );
      }
      _loadContestants();
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Failed to update status: $e')));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Manage Contestants',
                  style: Theme.of(context).textTheme.headlineSmall,
                ),
                const SizedBox(height: 16),
                TextFormField(
                  controller: _nameController,
                  decoration: const InputDecoration(labelText: 'Name'),
                  validator: (value) => value == null || value.isEmpty
                      ? 'Please enter a name'
                      : null,
                ),
                TextFormField(
                  controller: _photoUrlController,
                  decoration: const InputDecoration(
                    labelText: 'Photo URL (optional)',
                  ),
                  // No validation required as it's optional now
                ),
                const SizedBox(height: 16),
                DropdownButtonFormField<ContestantStatus>(
                  initialValue: _selectedStatus,
                  decoration: const InputDecoration(labelText: 'Status'),
                  onChanged: (ContestantStatus? newValue) {
                    setState(() {
                      _selectedStatus = newValue!;
                    });
                  },
                  items: ContestantStatus.values.map((ContestantStatus status) {
                    return DropdownMenuItem<ContestantStatus>(
                      value: status,
                      child: Text(status.toString().split('.').last),
                    );
                  }).toList(),
                ),
                const SizedBox(height: 24),
                ElevatedButton(
                  onPressed: _saveContestant,
                  child: const Text('Save Contestant'),
                ),
              ],
            ),
          ),
          const SizedBox(height: 24),
          Text(
            'Existing Contestants',
            style: Theme.of(context).textTheme.headlineSmall,
          ),
          const SizedBox(height: 16),
          if (_isLoading)
            const Center(child: CircularProgressIndicator())
          else if (_contestants.isEmpty)
            const Text('No contestants found.')
          else
            ListView.builder(
              shrinkWrap: true,
              physics:
                  const NeverScrollableScrollPhysics(), // To work inside SingleChildScrollView
              itemCount: _contestants.length,
              itemBuilder: (context, index) {
                final contestant = _contestants[index];
                return Card(
                  child: ListTile(
                    title: Text(contestant.name),
                    subtitle: Text(
                      'Status: ${contestant.status.toString().split('.').last} | '
                      'ID: ${contestant.contestantId ?? "Auto-generated"}',
                    ),
                    trailing: Text(
                      contestant.photoUrl != null &&
                              contestant.photoUrl!.isNotEmpty
                          ? 'Has Photo'
                          : 'No Photo',
                      style: TextStyle(
                        color:
                            contestant.photoUrl != null &&
                                contestant.photoUrl!.isNotEmpty
                            ? Colors.green
                            : Colors.grey,
                      ),
                    ),
                  ),
                );
              },
            ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _nameController.dispose();
    _photoUrlController.dispose();
    super.dispose();
  }
}
